#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2021  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

showUsage()
{
    cat <<EOF
Usage: $0 --target hostname operation [OPTION] [paths]

The command \`disnix-nixops-client' provides remote access to a \`disnix-service'
instance running on a machine in the network using NixOps. This allows the user
to perform remote deployment operations on a target machines that are instantiated
and deployed in some IaaS environment.

In most cases this command is not used directly, but is used by specifying the
--interface option for a Disnix command-line utility (such as \`disnix-env') or
by setting the \`DISNIX_CLIENT_INTERFACE' environment variable. By using one of
those properties, the Disnix tools will use the given interface instead of the
standard \`disnix-run-activity' which only provides local access.

Options:

Operations:
      --import               Imports a given closure into the Nix store of the
                             target machine. Optionally, transfers the closure
                             from this machine to the target machine
      --export               Exports the closure of a given Nix store path of
                             the target machine into a file, and optionally
                             downloads it
      --print-invalid        Prints all the paths that are not valid in the Nix
                             store of the target machine
  -r, --realise              Realises the given store derivation on the target
                             machine
      --set                  Creates a Disnix profile only containing the given
                             derivation on the target machine
  -q, --query-installed      Queries all the installed services on the given
                             target machine
      --query-requisites     Queries all the requisites (intra-dependencies) of
                             the given services on the target machine
      --collect-garbage      Collects garbage on the given target machine
      --activate             Activates the given service on the target machine
      --deactivate           Deactivates the given service on the target machine
      --lock                 Acquires a lock on a Disnix profile of the target
                             machine
      --unlock               Release the lock on a Disnix profile of the target
                             machine
      --snapshot             Snapshots the logical state of a component on the
                             given target machine
      --restore              Restores the logical state of a component on the
                             given target machine
      --delete-state         Deletes the state of a component on the given
                             machine
      --query-all-snapshots  Queries all available snapshots of a component on
                             the given target machine
      --query-latest-snapshot
                             Queries the latest snapshot of a component on the
                             given target machine
      --print-missing-snapshots  Prints the paths of all snapshots not present on
                             the given target machine
      --import-snapshots     Imports the specified snapshots into the remote
                             snapshot store
      --export-snapshots     Exports the specified snapshot to the local
                             snapshot store
      --resolve-snapshots    Converts the relative paths to the snapshots to
                             absolute paths
      --clean-snapshots      Removes older snapshots from the snapshot store
      --capture-config       Captures the configuration of the machine from the
                             Dysnomia container properties in a Nix expression
      --shell                Spawns a Dysnomia shell to run arbitrary maintenance
                             tasks
      --help                 Shows the usage of this command to the user
      --version              Shows the version of this command to the user

General options:
  -t, --target=TARGET        Specifies the hostname and optional port number of
                             the SSH server used to connect to the target
                             machine

Import/Export/Import snapshots/Export snapshots options:
      --localfile            Specifies that the given paths are stored locally
                             and must be transferred to the remote machine if
                             needed
      --remotefile           Specifies that the given paths are stored remotely
                             and must transferred from the remote machine if
                             needed

Set/Query installed/Lock/Unlock options:
  -p, --profile=PROFILE      Name of the Disnix profile. Defaults to: default

Collect garbage options:
  -d, --delete-old           Indicates whether all older generations of Nix
                             profiles must be removed as well

Activation/Deactivation/Snapshot/Restore/Delete state/Shell options:
      --type=TYPE            Specifies the activation module that should be
                             used, such as echo or process.
      --arguments=ARGUMENTS  Specifies the arguments passed to the Dysnomia
                             module, which is a string with key=value pairs
      --container=CONTAINER  Name of the container in which the component is
                             managed. If omitted it will default to the same
                             value as the type.

Shell options:
      --command=COMMAND      Commands to execute in the shell session

Query all snapshots/Query latest snapshot options:
  -C, --container=CONTAINER  Name of the container in which the component is managed
  -c, --component=COMPONENT  Name of the component hosted in a container

Clean snapshots options:
      --keep=NUM             Amount of snapshot generations to keep. Defaults
                             to: 1
  -C, --container=CONTAINER  Name of the container to filter on
  -c, --component=COMPONENT  Name of the component to filter on

Environment:
  NIXOPS_OPTS                Additional properties which are passed to the
                             \`nixops' command
  DISNIX_REMOTE_CLIENT       Name of the remote executable to run to execute a
                             deployment activity (defaults to:
                             disnix-run-activity)
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2021 Sander van der Burg
EOF
}

checkLocalOrRemoteFile()
{
    if [ "$localfile" != "1" ] && [ "$remotefile" != "1" ]
    then
        echo "ERROR: Either a remote or a localfile must be specified!" >&2
        exit 1
    fi
}

checkType()
{
    if [ "$type" = "" ]
    then
        echo "ERROR: A type must be specified!" >&2
        exit 1
    fi
}

checkContainer()
{
    if [ "$container" = "" ]
    then
        container=type
    fi
}

# Autoconf settings
export prefix=@prefix@

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o rqp:dC:c:hv -l import,export,print-invalid,realise,set,query-installed,query-requisites,collect-garbage,activate,deactivate,lock,unlock,snapshot,restore,delete-state,query-all-snapshots,query-latest-snapshot,print-missing-snapshots,import-snapshots,export-snapshots,resolve-snapshots,clean-snapshots,capture-config,shell,target:,localfile,remotefile,profile:,delete-old,type:,arguments:,container:,component:,keep:,command:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        --import)
            operation="import"
            ;;
        --export)
            operation="export"
            ;;
        --print-invalid)
            operation="print-invalid"
            ;;
        -r|--realise)
            operation="realise"
            ;;
        --set)
            operation="set"
            ;;
        -q|--query-installed)
            operation="query-installed"
            ;;
        --query-requisites)
            operation="query-requisites"
            ;;
        --collect-garbage)
            operation="collect-garbage"
            ;;
        --activate)
            operation="activate"
            path=$2
            ;;
        --deactivate)
            operation="deactivate"
            path=$2
            ;;
        --lock)
            operation="lock"
            path=$2
            ;;
        --unlock)
            operation="unlock"
            path=$2
            ;;
        --snapshot)
            operation="snapshot"
            path=$2
            ;;
        --restore)
            operation="restore"
            path=$2
            ;;
        --delete-state)
            operation="delete-state"
            ;;
        --shell)
            operation="shell"
            ;;
        --query-all-snapshots)
            operation="query-all-snapshots"
            ;;
        --query-latest-snapshot)
            operation="query-latest-snapshot"
            ;;
        --print-missing-snapshots)
            operation="print-missing-snapshots"
            ;;
        --import-snapshots)
            operation="import-snapshots"
            ;;
        --export-snapshots)
            operation="export-snapshots"
            ;;
        --resolve-snapshots)
            operation="resolve-snapshots"
            ;;
        --clean-snapshots)
            operation="clean-snapshots"
            ;;
        --capture-config)
            operation="capture-config"
            ;;
        --target)
            target=$2
            ;;
        --localfile)
            localfile=1
            ;;
        --remotefile)
            remotefile=1
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        -d|--delete-old)
            deleteOldArg="-d"
            ;;
        --type)
            type=$2
            ;;
        --arguments)
            argsArg="$argsArg --arguments \"$2\""
            ;;
        -C|--container)
            container=$2
            ;;
        -c|--component)
            component=$2
            ;;
        --keep)
            keep=$2
            ;;
        --command)
            command="$2"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

shift

# Validate the given options

checkTarget
checkTmpDir

if [ "$keep" = "" ]
then
    keep=1
fi

checkRemoteClient

# Execute selected operation

case "$operation" in
    import)
        checkLocalOrRemoteFile

        # A localfile must first be transferred
        if [ "$localfile" != "" ]
        then
            remoteClosure=`nixops ssh $target "mktemp -p $TMPDIR"`
            nixops scp $NIXOPS_OPTS --to $target "$@" $remoteClosure
        else
            remoteClosure="$@"
        fi

        # Import the closure into the Nix store
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --import $remoteClosure"
        ;;
    export)
        checkLocalOrRemoteFile

        closure=`nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --export $@"`

        # A remote file must be downloaded afterwards
        if [ "$remotefile" = "1" ]
        then
            localClosure=`mktemp -p $TMPDIR`
            nixops scp --from $NIXOPS_OPTS $target $closure $localClosure > /dev/null
            echo $localClosure
        fi
        ;;
    print-invalid)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --print-invalid $@"
        ;;
    realise)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --realise $@"
        ;;
    set)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT $profileArg --set $@"
        ;;
    query-installed)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT $profileArg --query-installed $@"
        ;;
    query-requisites)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --query-requisites $@"
        ;;
    collect-garbage)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --collect-garbage $deleteOldArg $@"
        ;;
    activate)
        checkType
        checkContainer
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --type $type --container $container $argsArg --activate $@"
        ;;
    deactivate)
        checkType
        checkContainer
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --type $type --container $container $argsArg --deactivate $@"
        ;;
    lock)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --lock $profileArg"
        ;;
    unlock)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --unlock $profileArg"
        ;;
    snapshot)
        checkType
        checkContainer
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --type $type --container $container $argsArg --snapshot $@"
        ;;
    restore)
        checkType
        checkContainer
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --type $type --container $container $argsArg --restore $@"
        ;;
    delete-state)
        checkType
        checkContainer
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --type $type --container $container $argsArg --delete-state $@"
        ;;
    shell)
        checkType
        checkContainer

        if [ "$command" = "" ]
        then
            nixops ssh $NIXOPS_OPTS $target -- -tt "disnix-run-activity --type $type --container $container $argsArg --shell $@"
        else
            nixops ssh $NIXOPS_OPTS $target -- -tt "disnix-run-activity --type $type --container $container $argsArg --command '$command' --shell $@"
        fi
        ;;
    query-all-snapshots)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --query-all-snapshots --container $container --component $component"
        ;;
    query-latest-snapshot)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --query-latest-snapshot --container $container --component $component"
        ;;
    print-missing-snapshots)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --print-missing-snapshots $@"
        ;;
    import-snapshots)
        checkLocalOrRemoteFile

        # A localfile must first be transferred
        if [ "$localfile" = "1" ]
        then
            tempdir=`nixops ssh $NIXOPS_OPTS $target "mktemp -d -p $TMPDIR"`
            nixops scp $NIXOPS_OPTS --to $target $@ $tempdir > /dev/null
            remoteSnapshots=`nixops ssh $NIXOPS_OPTS $target echo $tempdir/*`
        else
            remoteSnapshots="$@"
        fi

        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --container $container --component $component --import-snapshots $remoteSnapshots"
        ;;
    export-snapshots)
        for i in $@
        do
            tmpdir=`mktemp -d -p $TMPDIR`
            nixops scp $NIXOPS_OPTS --from $target $i $tmpdir > /dev/null
            echo $tmpdir
        done
        ;;
    resolve-snapshots)
        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --resolve-snapshots $@"
        ;;
    clean-snapshots)
        if [ "$container" != "" ]
        then
            containerArg="--container $container"
        fi

        if [ "$component" != "" ]
        then
            componentArg="--component $component"
        fi

        nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --clean-snapshots --keep $keep $containerArg $componentArg $@"
        ;;
    capture-config)
        tempfile=`nixops ssh $NIXOPS_OPTS $target "$DISNIX_REMOTE_CLIENT --capture-config"`
        nixops ssh $NIXOPS_OPTS $target "cat $tempfile; rm -f $tempfile"
        ;;
esac
