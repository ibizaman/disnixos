#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2020  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -n network_nix [ -n network2_nix ... ] -d distribution_nix [OPTION]
  or: $0 -P packages_nix -n network_nix [ -n network2_nix ... ] [OPTION]
  or: $0 --rollback [OPTION]
  or: $0 --undeploy [OPTION]
  or: $0 --switch-generation NUM [OPTION]
  or: $0 --list-generations [OPTION]
  or: $0 --delete-generations NUM [OPTION]
  or: $0 --delete-all-generations NUM [OPTION]

The command \`disnixos-env' is used to install, upgrade or roll back the
services and infrastructure of distributed system in a given environment. This
command requires three Nix expressions as input parameters; A services model
capturing the components of a distributed system and its inter-dependencies; A
network model capturing the NixOS configurations of machines in the network and
its properties and a distribution model which maps services to machines.

By invoking this command it will first build, distribute and activate all the
NixOS configurations of the machines in the network. Then it will build all the
services that are defined in the distribution model from source code including
all its dependencies. If all the services are successfully built, the closures
of the services are transferred to the target machines in the network. Finally,
the services are activated by traversing the inter-dependency graph of all the
services. In case of a failure, a rollback is performed to bring the system back
in its previous configuration.

When there is already a distributed system configuration deployed, an upgrade is
performed. In this phase only the changed parts of the system are deactivated and
activated. In this process we also deal with the inter-dependencies so that no
service deployment fails due to a missing inter-dependency.

This command is essentially a composition of the \`disnixos-deploy-network'
command (which deploys the infrastructure) and \`disnix-env' (which deploys the
services of which the system is composed).

Optionally this command can use \`nixops' instead of \`disnixos-deploy-network',
by adding the --use-nixops command-line option or by setting DISNIXOS_USE_NIXOPS
environment variable.

Options:
  -s, --services=services_nix
                                  Services Nix expression which describes all
                                  components of the distributed system
  -n, --network=network_nix       Network Nix expression which declares a NixOS
                                  configuration for each machine in the network
  -d, --distribution=distribution_nix
                                  Distribution Nix expression which maps
                                  services to machines in the network
  -P, --packages=packages_nix
                                  Packages Nix expression specifying the packages
                                  that should be deployed in a Nix profile mapped
                                  to each machine in the network
      --switch-to-generation=NUM  Switches to a specific profile generation
      --rollback                  Switches back to the previously deployed
                                  configuration
      --undeploy                  Generates a manifest file that conveniently
                                  undeploys all services
      --list-generations          Lists all profile generations of the current
                                  deployment
      --delete-generations=NUM    Deletes the specified generations. The number
                                  can correspond to generation numbers, days
                                  (d postfix) or 'old'.
      --delete-all-generations    Deletes all profile generations. This is
                                  useful when a deployment has been discarded
      --target-property=PROP      The target property of an infrastructure
                                  model, that specifies how to
      --deploy-state              Indicates whether to globally deploy state
                                  (disabled by default)
  -p, --profile=PROFILE           Name of the profile that is used for this
                                  system. Defaults to: default
  -m, --max-concurrent-transfers=NUM
                                  Maximum amount of concurrent closure
                                  transfers. Defauls to: 2
      --build-on-targets          Build the services on the target machines in
                                  the network instead of managing the build by
                                  the coordinator
      --extra-params              A string with an attribute set in the Nix
                                  expression language propagating extra
                                  parameters to the input models
      --coordinator-profile-path=PATH
                                  Path where to store the coordinator profile
                                  generations
      --no-upgrade                Do not perform an upgrade, but activate all
                                  services of the new configuration
      --no-lock                   Do not attempt to acquire and release any
                                  locks
      --no-coordinator-profile    Specifies that the coordinator profile should
                                  not be updated
      --no-target-profiles        Specifies that the target profiles should not
                                  be updated
      --no-migration              Do not migrate the state of services from one
                                  machine to another, even if they have been
                                  annotated as such
      --delete-state              Remove the obsolete state of deactivated
                                  services
      --show-trace                Shows a trace of the output
      --use-nixops                Use NixOps instead of Disnix's deployment
                                  facilities
      --disable-disnix            Do not enable the Disnix service on the target
                                  machines by default
      --no-infra-deployment       Only deploy the services, not the
                                  infrastructure
      --depth-first               Snapshots components depth-first as opposed to
                                  breadth-first. This approach is more space
                                  efficient, but slower.
      --keep=NUM                  Amount of snapshot generations to keep.
                                  Defaults to: 1
  -h, --help                      Shows the usage of this command
  -v, --version                   Shows the version of this command

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default).
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DISNIX_DELETE_STATE        If set to 1 it automatically deletes the obsolete
                             state after upgrading. (defaults to: 0)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
  DISNIXOS_USE_NIXOPS        When set to 1, it specifies that NixOps is used to
                             take care of the infrastructure deployment, so that
                             it properly interprets NixOps configurations and
                             uses NixOps tooling instead of Disnix's deployment
                             facilities.
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2020 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:n:d:P:p:m:hv -l services:,network:,distribution:,packages:,rollback,undeploy,switch-to-generation:,list-generations,delete-generations:,delete-all-generations,profile:,max-concurrent-transfers:,target-property:,interface:,use-nixops,disable-disnix,no-infra-deployment,build-on-targets,deploy-state,no-upgrade,no-lock,no-coordinator-profile,no-target-profiles,no-migration,delete-state,depth-first,extra-params:,keep:,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -n|--network)
            networkFiles="$networkFiles `readlink -f $2`"
            ;;
        -d|--distribution)
            distributionFile=`readlink -f $2`
            ;;
        -P|--packages)
            packagesFile=`readlink -f $2`
            ;;
        --rollback)
            switchGeneration=1
            switchGenerationArg="--rollback"
            ;;
        --undeploy)
            undeployArg="--undeploy"
            undeploy=1
            ;;
        --extra-params)
            extraParamsArg=("--extra-params" "$2")
            ;;
        --switch-to-generation)
            switchGeneration=1
            switchGenerationArg="--switch-to-generation $2"
            ;;
        --list-generations)
            switchGeneration=1
            switchGenerationArg="--list-generations"
            ;;
        --delete-generations)
            switchGeneration=1
            switchGenerationArg="--delete-generations $2"
            ;;
        --delete-all-generations)
            switchGeneration=1
            switchGenerationArg="--delete-all-generations"
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --interface)
            interface=$2
            ;;
        --use-nixops)
            useNixOps=1
            useNixOpsArg="--use-nixops"
            ;;
        --disable-disnix)
            disableDisnixArg="--disable-disnix"
            ;;
        --no-infra-deployment)
            noInfraDeployment=1
            ;;
        --build-on-targets)
            buildOnTargetsArg="--build-on-targets"
            ;;
        --no-migration)
            noMigrationArg="--no-migration"
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --no-upgrade)
            noUpgradeArg="--no-upgrade"
            ;;
        --no-lock)
            noLockArg="--no-lock"
            ;;
        --no-coordinator-profile)
            noCoordinatorProfileArg="--no-coordinator-profile"
            ;;
        --no-target-profiles)
            noTargetProfilesArg="--no-target-profiles"
            ;;
        --delete-state)
            deleteStateArg="--delete-state"
            ;;
        --depth-first)
            depthFirstArg="--depth-first"
            ;;
        --keep)
            keepArg="--keep $2"
            ;;
        --show-trace)
            showTrace=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
    esac

    shift
done

# Autoconf settings
export prefix=@prefix@

# Import checks
source @datadir@/@PACKAGE@/checks

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Validate the given options

if [ "$switchGeneration" != "1" ]
then
    generateDisnixOSModelArgs
fi

checkUseNixOps

# If no client interface is given and NixOps is used, then use the disnix-nixops-client by default
if [ "$useNixOps" = "1" ] && [ "$interface" = "" ] && [ "$DISNIX_CLIENT_INTERFACE" = "" ]
then
    interface=disnix-nixops-client
fi

checkClientInterface
checkTargetProperty
checkShowTrace

if [ "$switchGeneration" = "1" ]
then
    disnix-env $switchGenerationArg --target-property $targetProperty --interface $interface $profileArg $maxConcurrentTransfersArg $buildOnTargetsArg $deployStateArg $noUpgradeArg $noLockArg $noCoordinatorProfileArg $noTargetProfilesArg $noMigrationArg $deleteStateArg $switchToGenerationArg $depthFirstArg $keepArg $showTraceArg
else
    # Generate infrastructure model from network model
    infrastructureFile=`disnixos-geninfra --no-out-link $useNixOpsArg $networkFiles`

    if [ "$useNixOps" != "1" ] && [ "$noInfraDeployment" != "1" ]
    then
        # Upgrade the NixOS configurations through Disnix if NixOps is not used
        disnixos-deploy-network --target-property $targetProperty --interface $interface $disableDisnixArg $profileArg $maxConcurrentTransfersArg $buildOnTargetsArg $showTraceArg $networkFiles
    fi

    # Upgrade the services
    disnix-env $modelArgs -i $infrastructureFile --target-property $targetProperty --interface $interface $profileArg $maxConcurrentTransfersArg $buildOnTargetsArg $deployStateArg $noUpgradeArg "${extraParamsArg[@]}" $noLockArg $noCoordinatorProfileArg $noTargetProfilesArg $noMigrationArg $deleteStateArg $switchToGenerationArg $undeployArg $depthFirstArg $keepArg $showTraceArg
fi
