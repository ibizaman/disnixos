#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2021  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] -n network_expr [ -n network_expr2 ... ] MANIFEST

The command \`disnixos-gentests' generates a part of the testsuite that starts
the backdoors on the machines in the network and deploys the services in the
network of machines, by invoking \`disnix-activate'.

Options:
  -n, --network=network_nix  Network Nix expression which declares a NixOS configuration for each machine in the network
      --no-out-link          Do not create a 'result' symlink
      --show-trace           Shows a trace of the output
      --use-nixops           Use NixOps instead of Disnix's deployment facilities
  -h, --help                 Shows the usage of this command

Environment:
  DISNIXOS_USE_NIXOPS        When set to 1, it specifies that NixOps is used to
                             take care of the infrastructure deployment, so that
                             it properly interprets NixOps configurations and
                             uses NixOps tooling instead of Disnix's deployment
                             facilities.
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2021 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o n:hv -l network:,no-out-link,show-trace,use-nixops,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -n|--network)
            networkFiles="$networkFiles `readlink -f $2`"
            ;;
        --no-out-link)
            noOutLink=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        --use-nixops)
            useNixOps=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

shift

# Autoconf settings
export prefix=@prefix@

# Import checks
source @datadir@/@PACKAGE@/checks

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Validate options

checkNetworkFiles
checkShowTrace
checkNoOutLink
checkUseNixOps

if [ "$useNixOps" = "1" ]
then
    nixOpsArg="--arg nixOpsModel true"
fi

if [ "$@" = "" ]
then
    echo "ERROR: A manifest file must be specified!" >&2
    exit 1
else
    manifestFile=$(readlink -f $@)
fi

# Execute operation
nix-build @datadir@/@PACKAGE@/generate-tests.nix --argstr manifestFile $manifestFile --arg networkFiles "[ $networkFiles ]" $nixOpsArg $showTraceArg $noOutLinkArg
