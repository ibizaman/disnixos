#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2021  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] network_expr ...

The command \`disnixos-deploy-network' is used to install or upgrade the NixOS
configurations of machines in a network through the Disnix service.

Options:
      --target-property=PROP          The target property of an infrastructure
                                      model, that specifies how to
                                      connect to the remote Disnix interface.
                                      (Defaults to hostname)
      --interface=INTERFACE           Process that communicates with the remote
                                      disnix service. Defaults to:
                                      disnix-ssh-client
  -p, --profile=PROFILE               Name of the profile that is used for this
                                      system. Defaults to: default
  -m, --max-concurrent-transfers=NUM  Maximum amount of concurrent closure
                                      transfers. Defauls to: 2
      --disable-disnix                Do not enable the Disnix service on the
                                      target machines by default
      --build-on-targets              Build the services on the target machines
                                      in the network instead of managing the
                                      build by the coordinator
      --show-trace                    Shows a trace of the output
  -h, --help                          Shows the usage of this command
  -v, --version                       Shows the version of this command

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (which defaults to
                             \`disnix-ssh-client')
  DISNIX_TARGET_PROPERTY     Specifies which property in the infrastructure Nix
                             expression specifies how to connect to the remote
                             interface (defaults to: hostname)
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default).
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2021 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o p:m:hv -l profile:,max-concurrent-transfers:,target-property:,interface:,show-trace,disable-disnix,build-on-targets,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -p|--profile)
            profileArg="--profile $2"
            ;;
        -m|--max-concurrent-transfers)
            maxConcurrentTransfersArg="-m $2"
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --interface)
            interface=$2
            ;;
        --show-trace)
            showTrace=1
            ;;
        --disable-disnix)
            disableDisnixArg="--disable-disnix"
            ;;
        --build-on-targets)
            buildOnTargets=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

shift

# Import checks
source @DISNIX_PREFIX@/share/disnix/checks

# Validate the given options

checkTargetProperty
checkClientInterface
checkShowTrace

if [ "$1" = "" ]
then
    echo "ERROR: At least one network expression must be specified!" >&2
    exit 1
else
    while [ "$1" != "" ]
    do
        networkFileArgs="$networkFileArgs -n $(readlink -f $1)"
        shift
    done
fi

if [ "$buildOnTargets" = "1" ]
then
    # Build the components on the target machines if requested
    disnixos-delegate --target-property $targetProperty --interface $interface $maxConcurrentTransfersArg $disableDisnixArg $showTraceArg $networkFileArgs
fi

# Create a manifest file
manifest=`disnixos-manifest $networkFileArgs --target-property $targetProperty --interface $interface --no-out-link $disableDisnixArg $showTraceArg`

# Distribute system derivations
disnix-distribute $maxConcurrentTransfersArg $manifest

# Activate system derivations
disnix-activate $profileArg --no-upgrade $manifest
