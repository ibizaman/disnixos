#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2020  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -n network_nix [ -n network_nix ... ] -d distribution_nix [OPTION]
  or: $0 -P packages_nix -n network_nix [ -n network2_nix ... ] [OPTION]

The command \`disnixos-vm-env' is used to generate and launch a network of
virtual machines, closely matching the machine configurations defined in the
network model.

This command requires three Nix expressions as input parameters; A services
model capturing the components of a distributed system and its
inter-dependencies; A network model capturing the NixOS configurations of
machines in the network and its properties and a distribution model which maps
services to machines.

By invoking this command, it will first build a network of virtual machines,
closely matching the NixOS configurations in the network model. Then it will
build all the services that are defined in the distribution model from source
code including all its dependencies. Finally, it launches the virtual machines
and deploys the system into the virtual network.

Options:
  -s, --services=services_nix          Services Nix expression which describes
                                       all components of the distributed system
  -n, --network=network_nix            Network Nix expression which declares a
                                       NixOS configuration for each machine in
                                       the network
  -d, --distribution=distribution_nix  Distribution Nix expression which maps
                                       services to machines in the network
  -P, --packages=packages_nix
                                       Packages Nix expression specifying the
                                       packages that should be deployed in a Nix
                                       profile mapped to each machine in the
                                       network
      --deploy-state                   Indicates whether to globally deploy
                                       state (disabled by default)
      --show-trace                     Shows a trace of the output
  -h, --help                           Shows the usage of this command
  -v, --version                        Shows the version of this command

Environment:
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to:
                             /var/state/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2020 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:n:d:P:hv -l services:,network:,distribution:,packages:,deploy-state,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -n|--network)
            networkFiles="$networkFiles `readlink -f $2`"
            ;;
        -d|--distribution)
            distributionFile=`readlink -f $2`
            ;;
        -P|--packages)
            packagesFile=`readlink -f $2`
            ;;
        --no-out-link)
            noOutLink=1
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --show-trace)
            showTrace=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac

    shift
done

# Autoconf settings
export prefix=@prefix@

# Import checks
source @datadir@/@PACKAGE@/checks

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Validate the given options

generateDisnixOSModelArgs
checkShowTrace

if [ "$DISNIX_DEPLOY_STATE" = "1" ]
then
    deployStateArg="--deploy-state"
fi

if [ "$DYSNOMIA_STATEDIR" = "" ]
then
    DYSNOMIA_STATEDIR=/var/state/dysnomia
fi

# Unset the DISNIXOS_USE_NIXOPS variable that causes conflicts when generating the manifest
unset DISNIXOS_USE_NIXOPS

# Generate virtual machines matching the configuration in the network Nix expression
vmsPath=`nixos-build-vms --no-out-link $showTraceArg $networkFiles`

# Build the manifest

for n in $networkFiles
do
    networkArgs="$networkArgs -n $n"
done

manifest=`disnixos-manifest $modelArgs $networkArgs --vm --no-out-link $deployStateArg $showTraceArg`

# Copy the Dysnomia state data to the shared exchange folder so that all machines can access it
export TMPDIR=`mktemp -d`

if [ -d $DYSNOMIA_STATEDIR ]
then
    mkdir -p $TMPDIR/xchg-shared
    cp -a $DYSNOMIA_STATEDIR $TMPDIR/xchg-shared/dysnomia
fi

# Set a test script which automatically deploys the system
export tests=`cat $(disnixos-gentests --no-out-link $networkArgs $showTraceArg $manifest)`

# Start the virtual machines
cd $TMPDIR
$vmsPath/bin/nixos-test-driver
rm -R $TMPDIR
