#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2020  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] network_nix [ network2_nix ... ]

The command \`disnixos-geninfra' generates an infrastructure model from NixOS
network models, so that properties of the machines can be used by the basic
Disnix toolset.

Options:
      --no-out-link     Do not create a 'result' symlink
      --use-backdoor    Indicates that the backdoor must be enabled so that the
                        VMs can be accessed through a socket
      --use-vm-testing  Indicates that we generate virtual machines, so that the
                        physical characteristics are automatically added
      --use-nixops      Use NixOps instead of Disnix's deployment facilities
      --show-trace      Shows a trace of the output
  -h, --help            Shows the usage of this command
  -v, --version         Shows the version of this command

Environment:
  DISNIXOS_USE_NIXOPS        When set to 1, it specifies that NixOps is used to
                             take care of the infrastructure deployment, so that
                             it properly interprets NixOps configurations and
                             uses NixOps tooling instead of Disnix's deployment
                             facilities.
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2020 Sander van der Burg
EOF
}


# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o hv -l no-out-link,use-backdoor,use-vm-testing,use-nixops,show-trace,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        --no-out-link)
            noOutLink=1
            ;;
        --use-backdoor)
            useBackdoor=1
            ;;
        --use-vm-testing)
            useVMTesting=1
            ;;
        --use-nixops)
            useNixOps=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

shift

# Autoconf settings
export prefix=@prefix@

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Import checks
source @datadir@/@PACKAGE@/checks

# Validate the given options

checkNoOutLink
checkShowTrace

if [ "$useBackdoor" = "1" ]
then
    useBackdoorArg="--arg useBackdoor true"
fi

if [ "$useVMTesting" = "1" ]
then
    useVMTesting="--arg useVMTesting true"
fi

checkUseNixOps

if [ "$useNixOps" = "1" ]
then
    nixOpsArg="--arg nixOpsModel true --arg nixops $(dirname $(readlink -f $(type -p nixops)))/.."
fi

dysnomiaArg="--arg dysnomia $(dirname $(readlink -f $(type -p dysnomia)))/.."

if [ -z "$1" ]
then
    echo "ERROR: A network expression must be specified!" >&2
    exit 1
else
    while [ "$1" != "" ]
    do
        networkFiles="$networkFiles $(readlink -f $1)"
        shift
    done
fi

# Execute operation
nix-build @datadir@/@PACKAGE@/generate-infrastructure.nix --arg networkFiles "[ $networkFiles ]" $useBackdoorArg $useVMTesting $dysnomiaArg $nixOpsArg $showTraceArg $noOutLinkArg
