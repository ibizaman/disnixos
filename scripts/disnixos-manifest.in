#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2019  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 -s services_nix -n network_nix [ -n network2_nix ... ] -d distribution_nix [OPTION]
  or: $0 -P packages_nix -n network_nix [ -n network2_nix ... ] [OPTION]
  or: $0 -n network_nix [ -n network2_nix ... ] [OPTION]

The command \`disnixos-manifest' generates a manifest file from a service,
network and distribution Nix expression, which can be used for the
distribution of services to machines in the network and for the activation of
services on target machines in the right order.

Since the manifest file contains Nix store paths of every service, a side effect
of running this command is that all the services that have to be activated are
automatically built from source and stored in the Nix store of the coordinato"
machine."

Most users and developers don't need to use this command directly. The command
\`disnixos-env' performs generation of a manifest automatically. It is mostly
used for debugging purposes or to perform certain tasks manually.

Options:
  -s, --services=services_nix
                              Services Nix expression which describes all
                              components of the distributed system
  -n, --network=network_nix   Network Nix expression which declares a NixOS
                              configuration for each machine in the network
  -d, --distribution=distribution_nix
                              Distribution Nix expression which maps services to
                              machines in the network
  -P, --packages=packages_nix
                              Packages Nix expression specifying the packages
                              that should be deployed in a Nix profile mapped
                              to each machine in the network
      --target-property=PROP  The target property of an infrastructure model,
                              that specifies how to connect to the remote Disnix
                              interface. (Defaults to hostname)
      --interface=INTERFACE   Path to executable that communicates with a Disnix
                              interface. Defaults to: disnix-ssh-client
      --deploy-state          Indicates whether to globally deploy state
                              (disabled by default)
      --no-out-link           Do not create a 'result' symlink
      --show-trace            Shows a trace of the output
      --vm                    Configures a manifest used for the NixOS test
                              driver
      --use-nixops            Use NixOps instead of Disnix's deployment
                              facilities
      --disable-disnix        Do not enable the Disnix service on the target
                              machines by default
  -h, --help                  Shows the usage of this command to the user
  -v, --version               Shows the version of this command to the user

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (defaults to:
                             disnix-ssh-client)
  DISNIX_TARGET_PROPERTY     Sets the target property of an infrastructure
                             model, that specifies how to connect to the remote
                             Disnix interface. (Defaults to: hostname)
  DISNIX_DEPLOY_STATE        If set to 1 it also deploys the state of all
                             components. (defaults to: 0)
  DISNIXOS_USE_NIXOPS        When set to 1, it specifies that NixOps is used to
                             take care of the infrastructure deployment, so that
                             it properly interprets NixOps configurations and
                             uses NixOps tooling instead of Disnix's deployment
                             facilities.
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2019 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o s:n:d:P:hv -l services:,network:,distribution:,packages:,target-property:,interface:,deploy-state,no-out-link,show-trace,vm,use-nixops,disable-disnix,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
            servicesFile=`readlink -f $2`
            ;;
        -n|--network)
            networkFiles="$networkFiles `readlink -f $2`"
            ;;
        -d|--distribution)
            distributionFile=`readlink -f $2`
            ;;
        -P|--packages)
            packagesFile=`readlink -f $2`
            ;;
        --target-property)
            targetProperty=$2
            ;;
        --interface)
            interface=$2
            ;;
        --deploy-state)
            deployStateArg="--deploy-state"
            ;;
        --no-out-link)
            noOutLink=1
            ;;
        --show-trace)
            showTrace=1
            ;;
        --vm)
            useVM=1
            ;;
        --use-nixops)
            useNixOps=1
            ;;
        --disable-disnix)
            disableDisnixArg="--arg enableDisnix false"
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
    esac
    
    shift
done

# Autoconf settings
export prefix=@prefix@

# Import checks
source @datadir@/@PACKAGE@/checks

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Validate the given options

checkNetworkFiles
checkTargetProperty
checkClientInterface
checkNoOutLink
checkShowTrace

if [ "$useVM" = "1" ]
then
    targetProperty=backdoor
    genInfraArgs="--use-backdoor --use-vm-testing"
    interface="@prefix@/bin/disnix-backdoor-client"
fi

checkUseNixOps

if [ "$useNixOps" = "1" ]
then
    setNixOpsParams
fi

# Build the manifest file

if [ "$servicesFile" = "" ] && [ "$distributionFile" = "" ] && [ "$packagesFile" = "" ]
then
    if [ "$useNixOps" = "1" ]
    then
        nixOpsArg="--arg nixOpsModel true"
    fi

    if [ "$useVM" = "1" ]
    then
        vmArgs="--arg useVMTesting true --arg useBackdoor true"
    fi

    nix-build --arg networkFiles "[ $networkFiles ]" \
              --argstr targetProperty $targetProperty \
              --argstr clientInterface $interface \
              $noOutLinkArg \
              $vmArgs \
              $nixOpsArg \
              $disableDisnixArg \
              $showTraceArg \
              "$(readlink -f @datadir@/@PACKAGE@/manifest.nix)"
else
    generateDisnixOSModelArgs

    # Generate infrastructure model from network model
    infrastructureFile=`disnixos-geninfra --no-out-link $genInfraArgs $nixOpsArg $networkFiles`

    disnix-manifest $modelArgs -i $infrastructureFile --target-property $targetProperty --interface $interface $deployStateArg $noOutLinkArg $showTraceArg
fi
