#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2021  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    cat <<EOF
Usage: $0 [OPTION] network_nix [ network2_nix ... ]

The command \`disnixos-collect-garbage' collects all garbage from all the
machines defined in a network Nix expression and optionally removes all the
older profiles.

Options:
  -d, --delete-old            Removes all the old Nix profile generations
      --interface=INTERFACE   Path to executable that communicates with a Disnix
                              interface. Defaults to \`disnix-ssh-client'
      --target-property=PROP  The target property of an infrastructure model,
                              that specifies how to connect to the remote Disnix
                              interface. (Defaults to: hostname)
      --use-nixops            Use NixOps instead of Disnix for infrastructure
                              deployment
  -h, --help                  Shows the usage of this command to the user
  -v, --version               Shows the version of this command to the user

Environment:
  DISNIX_CLIENT_INTERFACE    Sets the client interface (which defaults to
                             \`disnix-ssh-client')
  DISNIX_TARGET_PROPERTY     Specifies which property in the infrastructure Nix
                             expression specifies how to connect to the remote
                             interface (defaults to: hostname)
  DISNIXOS_USE_NIXOPS        When set to 1, it specifies that NixOps is used to
                             take care of the infrastructure deployment, so that
                             it properly interprets NixOps configurations and
                             uses NixOps tooling instead of Disnix's deployment
                             facilities.
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2021 Sander van der Burg
EOF
}


# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o dhv -l delete-old,target-property:,interface:,use-nixops,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

# Evaluate valid options

eval set -- "$PARAMS"

while [ "$1" != "--" ]
do
    case "$1" in
        -d|--delete-old)
            deleteOldArg="-d"
            ;;
        --target-property)
            targetPropertyArg=$2
            ;;
        --interface)
            interface=$2
            ;;
        --use-nixops)
            useNixOps=1
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
    esac
    
    shift
done

shift

# Autoconf settings
export prefix=@prefix@

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Import checks
source @datadir@/@PACKAGE@/checks

# Validate the given options
checkClientInterface
checkUseNixOps
setNixOpsParams

if [ -z "$1" ]
then
    echo "ERROR: At least one network expression must be specified!" >&2
    exit 1
else
    while [ "$1" != "" ]
    do
        networkFiles="$networkFiles $(readlink -f $1)"
        shift
    done
fi

# Generate infrastructure model from network model
infrastructureFile=`disnixos-geninfra --no-out-link $nixOpsArg $networkFiles`

# Execute operation
disnix-collect-garbage $deleteOldArg $targetPropertyArg --interface $interface $infrastructureFile
